name: kubectl
description: Will download (if necessary) and run kubectl
author: Emmanuel Frecon <emmanuel.frecon@mitigram.com>
branding:
  icon: cloud-lightning
  color: purple

inputs:
  # kubeconfig, all information in one place...
  config:
    description: base64-encoded Kubernetes configuration YAML file
    required: false
    default: ""

  # Cluster information, host and CA certificate
  host:
    description: Kubernetes cluster host
    required: false
    default: ""
  certificate:
    description: Kubernetes cluster CA certificate
    required: false
    default: ""

  # Authentication information, either credentials, or bearer token.
  username:
    description: Username for access to Kubernetes cluster
    required: false
    default: ""
  password:
    description: Password for access to Kubernetes cluster
    required: false
    default: ""
  token:
    description: |
      Token for access to Kubernetes cluster, instead of username/password pair
    required: false
    default: ""

  # Command-line arguments to your kubectl call
  args:
    description: command-line options for kubectl call
    required: true
    default: cluster-info

  # kubectl binary information, these are inputs you probably do not really want
  # to change.
  root:
    description: Root for kubectl download location
    required: false
    default: https://storage.googleapis.com/kubernetes-release/release
  version:
    description: |
      kubectl version to use, latest stable will be used when empty, the
      default.
    required: false
    default: ""
  options:
    description: |
      Additional options to kubectl wrapper, e.g. -v to print out additional
      verbose information. This is a semi-internal input and should only be used
      for debugging.
    required: false
    default: ""
  cache:
    description: |
      How long should installed kubectl binaries and version information, be
      kept in cache before a new download will be attempted. This is best
      expressed as a number of seconds, but also supports simple human-readable
      periods such as 3d or 5 months. The default is one day.
    default: 1d
    required: false

outputs:
  # Main result of this action, i.e. everything that was printed out by the
  # kubectl call.
  value:
    description: output of the kubectl call.
    value: ${{ steps.kubectl.outputs.value }}

  # The version of the kubectl that was used for running the action. This is
  # mostly for information, but maybe of interest when debugging.
  version:
    description: |
      kubectl version that was used and/or installed. This will be a semantic
      version, i.e. <major>.<minor>.<patch>.
    value: ${{ steps.kver.outputs.version }}

runs:
  using: composite
  steps:
    # Detect the version of kubectl to use, prefer the latest stable version by
    # default. Version information is cached between runs, per runner and repo.
    -
      name: kubectl version to use
      id: version
      shell: bash
      # Whenever the input version is empty (the default, and probably best
      # solution in most cases), download the official stable version from the
      # root URL. In whichever cases, set the output of this step to be the
      # version to use when installing kubectl. Downloads are limited, as the
      # version is kept in cache.
      run: |
        if [ -z "${{ inputs.version }}" ]; then
          echo "version=$( ${{ github.action_path }}/version.sh \
                  -c "${{ runner.tool_cache }}/${{ github.repository }}/share/kubectl" \
                  -k "${{ inputs.cache }} " \
                  -r "${{ inputs.root }}" |
                grep -oE '[0-9]+(\.[0-9]+(\.[0-9]+)?)?' )" >> $GITHUB_OUTPUT
        else
          echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
        fi

    # Download the kubectl at the version detected above and install it for
    # access in the path. Binary is cached between runs, per runner and
    # repository.
    -
      name: Install kubectl
      uses: Mitigram/bininstall@main
      id: install
      with:
        installer: bin
        url: ${{ inputs.root }}/v${{ steps.version.outputs.version }}/bin/linux/amd64/kubectl
        cache: ${{ inputs.cache }}

    # Ask the installed kubectl which version it actually runs and report this
    # as a semver.
    -
      name: kubectl version discovery
      id: kver
      shell: bash
      run: |
        echo "version=$( kubectl version --client --short | grep Client | grep -oE '[0-9]+(\.[0-9]+(\.[0-9]+)?)?' )" >> $GITHUB_OUTPUT

    # We now have a kubectl binary to rely on. Convert authentication
    # information, depending on the various inputs that might have been provided
    # and give the content of the args input field as the command-line arguments
    # to the kubect call. Collect result, print it out and store it for further
    # usage as an output.
    -
      name: run kubectl
      id: kubectl
      shell: bash
      # Arrange for temporary directory to be runner's temporary directory. This
      # ensures that transient data will be removed once workflow has ended.
      env:
        TMPDIR: ${{ runner.temp }}
      # Now run the kubectl wrapper with the values from the inputs. Arrange for
      # setting an output with the result of the kubectl call, but also printing
      # it.
      run: |
        value=$(  ${{ github.action_path }}/kubectl.sh \
                    -k '${{ inputs.config }}' \
                    -s '${{ inputs.host }}' \
                    -u '${{ inputs.username }}' \
                    -p '${{ inputs.password }}' \
                    -c '${{ inputs.certificate }}' \
                    -t '${{ inputs.token }}' \
                    ${{ inputs.options }} \
                    -- \
                      ${{ inputs.args }} )
        printf '%s\n' "$value"
        # Perform following replacements: %->%25 \n->%0A \r->%0D, keeping the
        # line ending marker out. The complex sed newline replacement is
        # because sed works line-by-line.
        echo "value=$(printf %s "$value" | sed -e 's/%/%25/g' -e 's/\r/%0D/g' | sed -e ':a;N;$!ba;s/\n/%0A/g' | sed -e 's/%0D$//')" >> $GITHUB_OUTPUT
